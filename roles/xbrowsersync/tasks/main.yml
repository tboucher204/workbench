---
- name: Ensure xBrowserSync Directory Exist
  when: inventory_hostname == groups['managers'][0]
  file:
    path: "{{project_root_directory}}/xbrowsersync"
    state: directory
  tags: xbrowsersync

- name: Ensure xBrowserSync Configuration Files Exist
  when: inventory_hostname == groups['managers'][0]
  template:
    src: settings.json.j2
    dest: "{{project_root_directory}}/xbrowsersync/settings.json"
  tags: xbrowsersync
  no_log: true

- name: Deploy xBrowserSync Service
  when: inventory_hostname == groups['managers'][0]
  community.docker.docker_swarm_service:
    name: xbrowsersync
    hostname: "{{xbrowsersync_hostname}}"
    image: "{{xbrowsersync_docker_image}}:{{xbrowsersync_version}}"
    networks:
      - "{{traefik_network}}"
    mode: global
    force_update: false
    restart_config:
      condition: on-failure
    placement:
      constraints:
        - node.id == {{docker_master1_node_id}}
    mounts:
      - source: "/datavol/apps/xbrowsersync/settings.json"
        target: /usr/src/api/config/settings.json
        type: bind
    labels:
      traefik.http.routers.xbrowsersync.entrypoints: "websecure"
      traefik.http.routers.xbrowsersync.rule: "Host(`sync.{{project_tld}}`)"
      traefik.http.routers.xbrowsersync.middlewares: "default-headers@file"
      traefik.http.routers.xbrowsersync.tls: "true"
      traefik.http.routers.xbrowsersync.service: "xbrowsersync"
      # traefik.http.routers.xbrowsersync.tls.certresolver: "{{default_certificate_resolver}}" # Un-Comment this line to use a rule-based cert
      traefik.http.services.xbrowsersync.loadbalancer.server.port: "{{xbrowsersync_port}}"
      traefik.enable: "true"
    state: present
  tags: xbrowsersync