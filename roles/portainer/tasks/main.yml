---
- name: Ensure Portainer Directories Exist
  when: inventory_hostname == groups['managers'][0]
  file:
    path: "{{item}}"
    state: directory
  loop:
    - /datavol/apps/portainer/data
  tags: portainer

- name: Ensure Portainer Network Exists
  when: inventory_hostname == groups['managers'][0]
  community.docker.docker_network:
    name: "{{ agent_network }}"
    driver: "overlay"
    scope: "swarm"
    state: present
  tags: portainer

- name: Deploy Portainer Service
  when: inventory_hostname == groups['managers'][0]
  community.docker.docker_swarm_service:
    name: portainer
    hostname: "{{portainer_hostname}}"
    image: "{{portainer_docker_image}}:{{portainer_version}}"
    networks:
      - "{{ agent_network }}"
      - "{{ traefik_network }}"
    mode: replicated
    force_update: true
    restart_config:
      condition: on-failure
    placement:
      constraints:
        - node.role == manager
    replicas: 1
    publish:
      - published_port: "{{portainer_port1}}"
        target_port: "{{portainer_port1}}"
    mounts:
      - source: "/datavol/apps/portainer/data/"
        target: /data/
        type: bind
    labels:
      traefik.http.routers.portainer.entrypoints: "websecure"
      traefik.http.routers.portainer.rule: "Host(`portainer.{{project_tld}}`)"
      traefik.http.routers.portainer.middlewares: "default-headers@file,authelia@file"
      traefik.http.routers.portainer.tls: "true"
      traefik.http.routers.portainer.service: "portainer"
      # traefik.http.routers.portainer.tls.certresolver: "{{default_certificate_resolver}}" # Un-Comment this line to use a rule-based cert
      traefik.http.services.portainer.loadbalancer.server.scheme: "https"
      traefik.http.services.portainer.loadbalancer.server.port: "{{portainer_port1}}"
      traefik.enable: "true"
    state: present
  tags: portainer

- import_tasks: "{{role_path}}/tasks/agent.yml"
  tags:
    - portainer
