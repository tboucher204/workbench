---
- name: Ensure Photoprism Dataset Exist
  when: inventory_hostname == groups['media'][0]
  file:
    name: "{{project_root_directory}}/photoprism"
    state: directory
  tags: photoprism

- name: Ensure Photoprism Directories Exist
  when: inventory_hostname == groups['media'][0]
  file:
    path: "{{item}}"
    state: directory
  loop:
    - "{{project_media_directory}}/Pictures"
    - "{{project_media_directory}}/Watch/photos"
  tags: photoprism

- import_tasks: roles/mariadb/tasks/database_manager.yml
  when: inventory_hostname == groups['workers'][0]
  vars:
    database_name: "{{photoprism_database}}"
    database_user: "{{photoprism_database_user}}"
    database_password: "{{photoprism_database_password}}"
  tags: photoprism
  no_log: false

- name: Deploy Photoprism Service
  when: inventory_hostname == groups['managers'][0]
  community.docker.docker_swarm_service:
    name: photoprism
    hostname: "{{photoprism_hostname}}"
    image: "{{photoprism_docker_image}}:{{photoprism_version}}"
    networks:
      - "{{traefik_network}}"
    mode: replicated
    force_update: false
    restart_config:
      condition: on-failure
    env:
      PHOTOPRISM_ADMIN_USER: "{{photoprism_admin_user}}"  # admin login username
      PHOTOPRISM_ADMIN_PASSWORD: "{{photoprism_admin_password}}"    # initial admin password (8-72 characters)
      PHOTOPRISM_AUTH_MODE: "password"               # authentication mode (public, password)
      PHOTOPRISM_SITE_URL: "https://{{photo_tld}}"  # server URL in the format "http(s)://domain.name(:port)/(path)"
      PHOTOPRISM_DISABLE_TLS: "true"                # disables HTTPS/TLS even if the site URL starts with https:// and a certificate is available
      PHOTOPRISM_DEFAULT_TLS: "true"                 # defaults to a self-signed HTTPS/TLS certificate if no other certificate is available
      PHOTOPRISM_ORIGINALS_LIMIT: "5000"               # file size limit for originals in MB (increase for high-res video)
      PHOTOPRISM_HTTP_COMPRESSION: "gzip"            # improves transfer speed and bandwidth utilization (none or gzip)
      PHOTOPRISM_LOG_LEVEL: "info"                   # log level: trace, debug, info, warning, error, fatal, or panic
      PHOTOPRISM_READONLY: "false"                   # do not modify originals directory (reduced functionality)
      PHOTOPRISM_EXPERIMENTAL: "false"               # enables experimental features
      PHOTOPRISM_DISABLE_CHOWN: "false"              # disables updating storage permissions via chmod and chown on startup
      PHOTOPRISM_DISABLE_WEBDAV: "false"             # disables built-in WebDAV server
      PHOTOPRISM_DISABLE_SETTINGS: "false"           # disables settings UI and API
      PHOTOPRISM_DISABLE_TENSORFLOW: "false"         # disables all features depending on TensorFlow
      PHOTOPRISM_DISABLE_FACES: "false"              # disables face detection and recognition (requires TensorFlow)
      PHOTOPRISM_DISABLE_CLASSIFICATION: "false"     # disables image classification (requires TensorFlow)
      PHOTOPRISM_DISABLE_VECTORS: "false"            # disables vector graphics support
      PHOTOPRISM_DISABLE_RAW: "false"                # disables indexing and conversion of RAW images
      PHOTOPRISM_RAW_PRESETS: "false"                # enables applying user presets when converting RAW images (reduces performance)
      PHOTOPRISM_JPEG_QUALITY: "85"                    # a higher value increases the quality and file size of JPEG images and thumbnails (25-100)
      PHOTOPRISM_DETECT_NSFW: "false"                # automatically flags photos as private that MAY be offensive (requires TensorFlow)
      PHOTOPRISM_UPLOAD_NSFW: "true"                 # allows uploads that MAY be offensive (no effect without TensorFlow)
      # PHOTOPRISM_DATABASE_DRIVER: "sqlite"         # SQLite is an embedded database that doesn't require a server
      PHOTOPRISM_DATABASE_DRIVER: "mysql"            # use MariaDB 10.5+ or MySQL 8+ instead of SQLite for improved performance
      PHOTOPRISM_DATABASE_SERVER: "{{mariadb_hostname}}:{{mariadb_port}}"     # MariaDB or MySQL database server (hostname:port)
      PHOTOPRISM_DATABASE_NAME: "{{photoprism_database}}"         # MariaDB or MySQL database schema name
      PHOTOPRISM_DATABASE_USER: "{{photoprism_database_user}}"         # MariaDB or MySQL database user name
      PHOTOPRISM_DATABASE_PASSWORD: "{{photoprism_database_password}}"       # MariaDB or MySQL database user password
      PHOTOPRISM_SITE_CAPTION: "AI-Powered Photos App"
      PHOTOPRISM_SITE_DESCRIPTION: "The Boucher 6 Photos"                # meta site description
      PHOTOPRISM_SITE_AUTHOR: "tboucher"                     # meta site author
      ## Video Transcoding (https://docs.photoprism.app/getting-started/advanced/transcoding/):
      # PHOTOPRISM_FFMPEG_ENCODER: "software"        # H.264/AVC encoder (software, intel, nvidia, apple, raspberry, or vaapi)
      # PHOTOPRISM_FFMPEG_SIZE: "1920"               # video size limit in pixels (720-7680) (default: 3840)
      # PHOTOPRISM_FFMPEG_BITRATE: "32"              # video bitrate limit in Mbit/s (default: 50)
      ## Run/install on first startup (options: update https gpu tensorflow davfs clitools clean):
      # PHOTOPRISM_INIT: "https gpu tensorflow"
      ## Run as a non-root user after initialization (supported: 0, 33, 50-99, 500-600, and 900-1200):
      # PHOTOPRISM_UID: 1000
      # PHOTOPRISM_GID: 1000
      # PHOTOPRISM_UMASK: 0000
    placement:
      constraints:
        - node.id == {{docker_worker2_node_id}}
    replicas: 1
    mounts:
      - source: "{{project_media_directory}}/Pictures/"
        target: /photoprism/originals
        type: bind
      - source: "{{project_media_directory}}/Watch/photos/"
        target: /photoprism/import
        type: bind
      - source: "{{project_root_directory}}/photoprism/"
        target: /photoprism/storage
        type: bind
    labels:
      traefik.http.routers.photoprism.entrypoints: "websecure"
      traefik.http.routers.photoprism.rule: "Host(`{{photo_tld}}`)"
      traefik.http.routers.photoprism.middlewares: "default-headers@file"
      traefik.http.routers.photoprism.tls: "true"
      traefik.http.routers.photoprism.service: "photoprism"
      # traefik.http.routers.photoprism.tls.certresolver: "{{default_certificate_resolver}}" # Un-Comment this line to use a rule-based cert
      traefik.http.services.photoprism.loadbalancer.server.port: "{{photoprism_port}}"
      traefik.enable: "true"
    state: present
  tags: photoprism