---
- name: Ensure Graylog Data Volume Exist
  when: inventory_hostname == groups['workers'][0]
  docker_volume:
    name: graylog_data
    state: present
  tags: graylog

- name: Ensure Geoip Directories Exist
  when: inventory_hostname == groups['workers'][0]
  file:
    path: "{{item}}"
    state: directory
  loop:
    - "{{project_root_directory}}/geoip"
  tags: geoip

- name: Create Graylog Docker Container
  when: inventory_hostname == groups['managers'][0]
  community.docker.docker_swarm_service:
    name: graylog
    image: "{{ graylog_docker_image }}:{{ graylog_version }}"
    hostname: "{{ graylog_hostname }}"
    command: "/usr/bin/tini -- wait-for-it opensearch:9200 --  /docker-entrypoint.sh"
    networks:
      - "{{ traefik_network }}"
    publish:
      - published_port: "{{  graylog_syslog_port }}"
        target_port: "{{ graylog_syslog_port }}"
        protocol: tcp
        mode: "host"
      - published_port: "{{  graylog_syslog_port }}"
        target_port: "{{ graylog_syslog_port }}"
        protocol: udp
        mode: "host"
    mode: replicated
    force_update: false
    restart_config:
      condition: on-failure
    placement:
      constraints:
        - node.id == {{ docker_worker1_node_id }}
    mounts:
      - source: graylog_data
        target: /usr/share/graylog/data
        type: volume
      - source: "{{project_root_directory}}/geoip/"
        target: /etc/graylog/server
        type: bind
    replicas: 1
    env:
      TZ: "{{ default_timezone }}"
      ROOT_TIMEZONE: "{{ default_timezone }}"
      GRAYLOG_TIMEZONE: "{{ default_timezone }}"
      GRAYLOG_PASSWORD_SECRET: "{{ graylog_password_secret }}"
      GRAYLOG_ROOT_PASSWORD_SHA2: "{{ graylog_root_password_hash }}"
      GRAYLOG_HTTP_EXTERNAL_URI: "https://logs.{{ project_tld }}/"
    labels:
      traefik.http.routers.graylog.entrypoints: "websecure"
      traefik.http.routers.graylog.rule: "Host(`logs.{{ project_tld }}`)"
      traefik.http.routers.graylog.middlewares: "authelia@file"
      traefik.http.routers.graylog.tls: "true"
      traefik.http.routers.graylog.service: "graylog"
      # traefik.http.routers.graylog.tls.certresolver: "{{ default_certificate_resolver }}" # Un-Comment this line to use a rule-based cert
      traefik.http.services.graylog.loadbalancer.server.port: "{{ graylog_port }}"
      traefik.enable: "true"
    state: present
  tags: graylog