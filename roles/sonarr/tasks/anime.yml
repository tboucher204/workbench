---
- name: Ensure Anime Media Dataset Exist
  when: inventory_hostname == groups['media'][0]
  file:
    name: "{{project_media_directory}}/Videos"
    state: directory
  tags: sonarr

- name: Ensure Anime Media Download Dataset Exist
  when: inventory_hostname == groups['media'][0]
  file:
    name: "{{project_download_directory}}"
    state: directory
  tags: sonarr

- name: Ensure Sonarr Anime Dataset Exist
  when: inventory_hostname == groups['media'][0]
  file:
    name: "{{project_root_directory}}/sonarr2"
    state: directory
  tags: sonarr

- name: Ensure Sonarr Anime Configuration Files Exist
  when: inventory_hostname == groups['media'][0]
  template:
    src: config-anime.xml.j2
    dest: "{{project_root_directory}}/sonarr2/config.xml"
  tags: sonarr
  no_log: true

- name: Deploy Sonarr Anime Service
  when: inventory_hostname == groups['managers'][0]
  community.docker.docker_swarm_service:
    name: sonarr_anime
    hostname: "{{sonarr_anime_hostname}}"
    image: "{{sonarr_anime_docker_image}}:{{sonarr_anime_version}}"
    networks:
      - "{{traefik_network}}"
    mode: replicated
    force_update: false
    restart_config:
      condition: on-failure
    env:
      PUID: "{{media_user}}"
      PGID: "{{media_group}}"
      TZ: "{{default_timezone}}"
      DOCKER_MODS: "ghcr.io/themepark-dev/theme.park:{{sonarr_hostname}}"
      TP_THEME: "{{theme_park_default}}"
    placement:
      constraints:
        - node.id == {{docker_worker2_node_id}}
    replicas: 1
    mounts:
      - source: "{{project_root_directory}}/sonarr2/"
        target: /config/
        type: bind
      - source: "{{project_media_directory}}/Videos/"
        target: /media/anime/
        type: bind
      - source: "{{project_download_directory}}"
        target: /media/downloads/
        type: bind
    labels:
      traefik.http.routers.sonarr-anime.entrypoints: "websecure"
      traefik.http.routers.sonarr-anime.rule: "Host(`sonarr2.{{project_tld}}`)"
      traefik.http.routers.sonarr-anime.middlewares: "default-headers@file,authentik@file"
      traefik.http.routers.sonarr-anime.tls: "true"
      traefik.http.routers.sonarr-anime.service: "sonarr-anime"
      # traefik.http.routers.sonarr-anime.tls.certresolver: "{{default_certificate_resolver}}" # Un-Comment this line to use a rule-based cert
      traefik.http.services.sonarr-anime.loadbalancer.server.port: "{{sonarr_anime_port}}"
      traefik.enable: "true"
    state: present
  tags: sonarr