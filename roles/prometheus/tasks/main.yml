---
- name: Ensure Prometheus Directories Exist
  when: inventory_hostname == groups['workers'][0]
  file:
    path: "{{item}}"
    state: directory
  loop:
    - "{{project_root_directory}}/prometheus"
    - "{{project_root_directory}}/prometheus/data"
  tags: prometheus

- name: Ensure Prometheus Configuration Files Exist
  when: inventory_hostname == groups['workers'][0]
  template:
    src: prometheus.yml.j2
    dest: "{{project_root_directory}}/prometheus/prometheus.yml"
  tags: prometheus
  no_log: true

- name: Deploy Prometheus Service
  when: inventory_hostname == groups['managers'][0]
  community.docker.docker_swarm_service:
    name: prometheus
    hostname: "{{prometheus_hostname}}"
    image: "{{prometheus_docker_image}}:{{prometheus_version}}"
    networks:
      - "{{traefik_network}}"
    publish:
      - published_port: "9090"
        target_port: "9090"
        protocol: "tcp"
        mode: "host"
    mode: replicated
    force_update: true
    restart_config:
      condition: on-failure
    placement:
      constraints:
        - node.id == {{docker_worker1_node_id}}
    replicas: 1
    mounts:
      - source: "{{project_root_directory}}/prometheus/data/"
        target: /prometheus
        type: bind
      - source: "{{project_root_directory}}/prometheus/prometheus.yml"
        target: /etc/prometheus/prometheus.yml
        type: bind
    labels:
      traefik.http.routers.prometheus.entrypoints: "websecure"
      traefik.http.routers.prometheus.rule: "Host(`prometheus.{{project_tld}}`)"
      traefik.http.routers.prometheus.middlewares: "default-headers@file"
      traefik.http.routers.prometheus.tls: "true"
      traefik.http.routers.prometheus.service: "prometheus"
      # traefik.http.routers.prometheus.tls.certresolver: "{{default_certificate_resolver}}" # Un-Comment this line to use a rule-based cert
      traefik.http.services.prometheus.loadbalancer.server.port: "{{prometheus_port}}"
      traefik.enable: "true"
    state: present
  tags: prometheus