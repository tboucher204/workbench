---
- name: Ensure Media Datasets Exist
  when: inventory_hostname == groups['media'][0]
  file:
    path: "{{item}}"
    state: directory
  loop:
    - "{{project_media_directory}}/Music"
    - "{{project_media_directory}}/Music Videos"
  tags: lidarr

- name: Ensure Media Download Datasets Exist
  when: inventory_hostname == groups['media'][0]
  file:
    path: "{{item}}"
    state: directory
  loop:
    - "{{project_download_directory}}/music"
    - "{{project_download_directory}}/music-videos"
  tags: lidarr

- name: Ensure Lidarr Dataset Exist
  when: inventory_hostname == groups['media'][0]
  file:
    name: "{{project_root_directory}}/lidarr"
    state: directory
  tags: lidarr

- name: Ensure Lidarr Configuration Files Exist
  when: inventory_hostname == groups['media'][0]
  template:
    src: config.xml.j2
    dest: "{{project_root_directory}}/lidarr/config.xml"
  tags: lidarr
  no_log: true

- name: Deploy Lidarr Service
  when: inventory_hostname == groups['managers'][0]
  community.docker.docker_swarm_service:
    name: lidarr
    hostname: "{{lidarr_hostname}}"
    image: "{{lidarr_docker_image}}:{{lidarr_version}}"
    networks:
      - "{{traefik_network}}"
    mode: replicated
    force_update: false
    restart_config:
      condition: on-failure
    env:
      PUID: "{{media_user}}"
      PGID: "{{media_group}}"
      TZ: "{{default_timezone}}"
      DOCKER_MODS: "ghcr.io/themepark-dev/theme.park:{{lidarr_hostname}}"
      TP_THEME: "{{theme_park_default}}"
      enableAudioScript: "true"
      enableVideoScript: "false"
      scriptInterval: "15m"
      configureLidarrWithOptimalSettings: "true"
      searchSort: "date"
      audioFormat: "mp3"
      audioBitrate: "high"
      requireQuality: "true"
      enableReplaygainTags: "true"
      audioLyricType: "both"
      dlClientSource: "deezer"
      arlToken: "{{lidarr_arl_token}}"
      tidalCountryCode: "US"
      addDeezerTopArtists: "false"
      addDeezerTopAlbumArtists: "false"
      addDeezerTopTrackArtists: "false"
      topLimit: "10"
      addRelatedArtists: "false"
      numberOfRelatedArtistsToAddPerArtist: "5"
      lidarrSearchForMissing: "true"
      addFeaturedVideoArtists: "false"
      plexUrl: "{{plex_url}}"
      plexToken: "{{plex_token}}"
      youtubeSubtitleLanguage: "en"
      enableQueueCleaner: "true"
      matchDistance: "5"
      enableBeetsTagging: "true"
      beetsMatchPercentage: "90"
      retryNotFound: "90"
    placement:
      constraints:
        - node.id == {{docker_worker2_node_id}}
    replicas: 1
    mounts:
      - source: "{{project_root_directory}}/lidarr/"
        target: /config
        type: bind
      - source: "{{project_media_directory}}/Music/"
        target: /media/music
        type: bind
      - source: "{{project_download_directory}}"
        target: /media/downloads
        type: bind
    labels:
      traefik.http.routers.lidarr.entrypoints: "websecure"
      traefik.http.routers.lidarr.rule: "Host(`lidarr.{{project_tld}}`)"
      traefik.http.routers.lidarr.middlewares: "default-headers@file,authelia@file"
      traefik.http.routers.lidarr.tls: "true"
      traefik.http.routers.lidarr.service: "lidarr"
      # traefik.http.routers.lidarr.tls.certresolver: "{{default_certificate_resolver}}" # Un-Comment this line to use a rule-based cert
      traefik.http.services.lidarr.loadbalancer.server.port: "{{lidarr_port}}"
      traefik.enable: "true"
    state: present
  tags: lidarr
  