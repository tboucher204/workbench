---
- name: Ensure Media Datasets Exist
  when: inventory_hostname == groups['media'][0]
  file:
    path: "{{item}}"
    state: directory
  loop:
    - "{{project_media_directory}}/Music"
    - "{{project_media_directory}}/Music Videos"
  tags: lidarr

- name: Ensure Media Download Datasets Exist
  when: inventory_hostname == groups['media'][0]
  file:
    path: "{{item}}"
    state: directory
  loop:
    - "{{project_download_directory}}/music"
    - "{{project_download_directory}}/music-videos"
  tags: lidarr

- name: Ensure Lidarr Dataset Exist
  when: inventory_hostname == groups['media'][0]
  file:
    path: "{{item}}"
    state: directory
  loop:
    - "{{project_root_directory}}/lidarr"
    - "{{project_root_directory}}/lidarr/config"
    - "{{project_root_directory}}/lidarr/custom-services"
    - "{{project_root_directory}}/lidarr/custom-cont-init"
  tags: lidarr

- name: Ensure Lidarr Configuration Files Exist
  when: inventory_hostname == groups['media'][0]
  template:
    src: config.xml.j2
    dest: "{{project_root_directory}}/lidarr/config/config.xml"
  tags: lidarr
  no_log: true

- name: Ensure Lidarr Extended Configuration Files Exist
  when: inventory_hostname == groups['media'][0]
  template:
    src: extended.conf.j2
    dest: "{{project_root_directory}}/lidarr/config/extended.conf"
  tags: lidarr
  no_log: true

- name: Ensure Lidarr custom-services Files Exist
  when: inventory_hostname == groups['media'][0]
  template:
    src: scripts_init.bash.j2
    dest: "{{project_root_directory}}/lidarr/custom-cont-init/scripts_init.bash"
  tags: lidarr
  no_log: true

- name: Deploy Lidarr Service
  when: inventory_hostname == groups['managers'][0]
  community.docker.docker_swarm_service:
    name: lidarr
    hostname: "{{lidarr_hostname}}"
    image: "{{lidarr_docker_image}}:{{lidarr_version}}"
    networks:
      - "{{traefik_network}}"
    mode: replicated
    force_update: false
    restart_config:
      condition: on-failure
    env:
      PUID: "{{media_user}}"
      PGID: "{{media_group}}"
      TZ: "{{default_timezone}}"
      DOCKER_MODS: "gilbn/theme.park:{{lidarr_hostname}}"
      TP_THEME: "{{theme_park_default}}"
    placement:
      constraints:
        - node.id == {{docker_worker2_node_id}}
    replicas: 1
    mounts:
      - source: "{{project_media_directory}}/lidarr/config/"
        target: /config
        type: bind
      - source: "{{project_media_directory}}/lidarr/config/custom-services/"
        target: /custom-services.d
        type: bind
      - source: "{{project_media_directory}}/lidarr/config/custom-cont-init/"
        target: /custom-cont-init.d
        type: bind
      - source: "{{project_media_directory}}/music/"
        target: /media/music
        type: bind
      - source: "{{project_download_directory}}"
        target: /media/downloads
        type: bind
    labels:
      traefik.http.routers.lidarr.entrypoints: "websecure"
      traefik.http.routers.lidarr.rule: "Host(`lidarr.{{project_tld}}`)"
      traefik.http.routers.lidarr.middlewares: "default-headers@file,authelia@file"
      traefik.http.routers.lidarr.tls: "true"
      traefik.http.routers.lidarr.service: "lidarr"
      # traefik.http.routers.lidarr.tls.certresolver: "{{default_certificate_resolver}}" # Un-Comment this line to use a rule-based cert
      traefik.http.services.lidarr.loadbalancer.server.port: "{{lidarr_port}}"
      traefik.enable: "true"
    state: present
  tags: lidarr
