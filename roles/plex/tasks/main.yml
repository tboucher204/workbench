---
- name: Ensure Media Datasets Exist
  when: inventory_hostname == groups['media'][0]
  community.general.zfs:
    name: "{{item}}"
    state: present
  loop:
    - docker_worker2/media/anime
    - docker_worker2/media/audiobooks
    - docker_worker2/media/kids
    - docker_worker2/media/movies
    - docker_worker2/media/music
    - docker_worker2/media/tv
  tags: plex

- name: Ensure Plex Dataset Exist
  when: inventory_hostname == groups['media'][0]
  community.general.zfs:
    name: docker_worker2/apps/plex
    state: present
  tags: plex

- name: Deploy Plex Service
  when: inventory_hostname == groups['managers'][0]
  community.docker.docker_swarm_service:
    name: plex
    hostname: "{{plex_hostname}}"
    image: "{{plex_docker_image}}:{{plex_version}}"
    networks:
      - "{{traefik_network}}"
    mode: replicated
    force_update: false
    restart_config:
      condition: on-failure
    env:
      PUID: "{{media_user}}"
      PGID: "{{media_group}}"
      VERSION: "docker"
      PLEX_CLAIM: "{{plex_claim_token}}"
    placement:
      constraints:
        - node.id == {{docker_worker2_node_id}}
    replicas: 1
    mounts:
      - source: "/datavol/apps/plex/"
        target: /config/
        type: bind
      - source: "{{project_media_directory}}/movies/"
        target: /movies/
        type: bind
      - source: "{{project_media_directory}}/tv/"
        target: /tv/
        type: bind
      - source: "{{project_media_directory}}/kids/"
        target: /kids/
        type: bind
      - source: "{{project_media_directory}}/anime/"
        target: /anime/
        type: bind
      - source: "{{project_media_directory}}/music/"
        target: /music/
        type: bind
      - source: "{{project_media_directory}}/audiobooks/"
        target: /audiobooks/
        type: bind
    labels:
      traefik.http.routers.plex.entrypoints: "websecure"
      traefik.http.routers.plex.rule: "Host(`{{project_tld}}`)"
      traefik.http.routers.plex.middlewares: "default-headers@file"
      traefik.http.routers.plex.tls: "true"
      traefik.http.routers.plex.service: "plex"
      # traefik.http.routers.plex.tls.certresolver: "{{default_certificate_resolver}}"
      traefik.http.services.plex.loadbalancer.server.port: "{{plex_port}}"
      traefik.enable: "true"
    state: present
  tags: plex