---
- name: Ensure Media Datasets Exist
  when: inventory_hostname == groups['media'][0]
  file:
    path: "{{item}}"
    state: directory
  loop:
    - /media/Audiobooks/
    - /media/Books/
    - /media/Comics/
    - /media/Music/
    - /media/Music Videos/
    - /media/Photos/
    - /media/Playlists/
    - /media/Podcasts/
    - /media/Videos/
    - /media/Videos/Anime TV/
    - /media/Videos/Fitness/
    - /media/Videos/Miscellaneous/
    - /media/Videos/Movies/
    - /media/Videos/TV Series/
  tags: plex

- name: Ensure Plex Dataset Exist
  when: inventory_hostname == groups['media'][0]
  file:
    name: "{{project_root_directory}}/plex"
    state: directory
  tags: plex

- name: Deploy Plex Service
  when: inventory_hostname == groups['managers'][0]
  community.docker.docker_swarm_service:
    name: plex
    hostname: "{{plex_hostname}}"
    image: "{{plex_docker_image}}:{{plex_version}}"
    networks:
      - "{{traefik_network}}"
    mode: replicated
    force_update: false
    restart_config:
      condition: on-failure
    env:
      PUID: "{{media_user}}"
      PGID: "{{media_group}}"
      VERSION: "docker"
      # PLEX_CLAIM: "{{plex_claim_token}}"
    placement:
      constraints:
        - node.id == {{docker_worker2_node_id}}
    replicas: 1
    mounts:
      - source: "{{project_root_directory}}/plex/"
        target: /config/
        type: bind
      - source: "{{project_media_directory}}/Videos/Movies-4K/"
        target: /movies-4k/
        type: bind
      - source: "{{project_media_directory}}Videos/Movies/"
        target: /movies/
        type: bind
      - source: "{{project_media_directory}}Videos/TV-4K/"
        target: /tv-4k/
        type: bind
      - source: "{{project_media_directory}}Videos/TV Series /"
        target: /tv/
        type: bind
      - source: "{{project_media_directory}}Videos/Anime TV/"
        target: /anime/
        type: bind
      - source: "{{project_media_directory}}/Videos/Music/"
        target: /music/
        type: bind
      - source: "{{project_media_directory}}/Videos/Audiobooks/"
        target: /audiobooks/
        type: bind
      - source: "{{project_media_directory}}/Videos/Pictures/"
        target: /picture/
        type: bind
      - source: "{{project_media_directory}}/Videos/Fitness/"
        target: /fitness/
        type: bind
      - source: "{{project_media_directory}}/Videos/Miscellaneous/"
        target: /miscellaneous/
        type: bind
    labels:
      traefik.http.routers.plex.entrypoints: "websecure"
      traefik.http.routers.plex.rule: "Host(`plex.{{project_tld}}`)"
      traefik.http.routers.plex.middlewares: "default-headers@file"
      traefik.http.routers.plex.tls: "true"
      traefik.http.routers.plex.service: "plex"
      # traefik.http.routers.plex.tls.certresolver: "{{default_certificate_resolver}}" # Un-Comment this line to use a rule-based cert
      traefik.http.services.plex.loadbalancer.server.port: "{{plex_port}}"
      traefik.enable: "true"
    state: present
  tags: plex