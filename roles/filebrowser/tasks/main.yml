---
- name: Ensure Filebrowser Dataset Exist
  when: inventory_hostname == groups['workers'][0]
  file:
    path: "{{item}}"
    state: directory
  loop:
    - "{{project_root_directory}}/filebrowser"
  tags: filebrowser

- name: Deploy Filebrowser Service
  when: inventory_hostname == groups['managers'][0]
  community.docker.docker_swarm_service:
    name: filebrowser
    hostname: "{{filebrowser_hostname}}"
    image: "{{filebrowser_docker_image}}:{{filebrowser_version}}"
    networks:
      - "{{traefik_network}}"
    mode: replicated
    force_update: false
    restart_config:
      condition: on-failure
    env:
      PUID: "{{media_user}}"
      PGID: "{{media_group}}"
      TZ: "{{default_timezone}}"
    placement:
      constraints:
        - node.id == {{docker_worker1_node_id}}
    replicas: 1
    mounts:
      - source: "{{project_root_directory}}/filebrowser/settings.json"
        target: /config/settings.json
        type: bind
      - source: "{{project_root_directory}}/filebrowser/filebrowser.db"
        target: /database/filebrowser.db
        type: bind
      - source: "{{project_media_directory}}/"
        target: /srv
        type: bind
    labels:
      traefik.http.routers.filebrowser.entrypoints: "websecure"
      traefik.http.routers.filebrowser.rule: "Host(`filebrowser.{{project_tld}}`)"
      traefik.http.routers.filebrowser.middlewares: "default-headers@file,authelia@file"
      traefik.http.routers.filebrowser.tls: "true"
      traefik.http.routers.filebrowser.service: "filebrowser"
      # traefik.http.routers.filebrowser.tls.certresolver: "{{default_certificate_resolver}}" # Un-Comment this line to use a rule-based cert
      traefik.http.services.filebrowser.loadbalancer.server.port: "{{filebrowser_port}}"
      traefik.enable: "true"
    state: present
  tags: filebrowser