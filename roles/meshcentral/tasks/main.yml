---
- name: Ensure Meshcentral Dataset Exist
  when: inventory_hostname == groups['media'][0]
  file:
    path: "{{ item }}"
    state: directory
    owner: 1000
    group: 1000
    mode: 0755
  loop:
    - "{{ project_root_directory }}/meshcentral"
    - "{{ project_root_directory }}/meshcentral/files"
    - "{{ project_root_directory }}/meshcentral/data"
    - "{{ project_root_directory }}/meshcentral/backup"
    - "{{ project_root_directory }}/meshcentral/web"
  tags: meshcentral

- name: Ensure Meshcentral Configuration File Exist
  when: inventory_hostname == groups['media'][0]
  template:
    src: config.json.j2
    dest: "{{project_root_directory}}/meshcentral/data/config.json"
  tags: meshcentral
  no_log: true

- name: Deploy Meshcentral Service
  when: inventory_hostname == groups['managers'][0]
  community.docker.docker_swarm_service:
    name: meshcentral
    hostname: "{{meshcentral_hostname}}"
    image: "{{meshcentral_docker_image}}:{{meshcentral_version}}"
    networks:
      - "{{traefik_network}}"
    mode: replicated
    force_update: true
    restart_config:
      condition: on-failure
    env:
      HOSTNAME: "mesh.{{project_tld}}"
      REVERSE_PROXY: "true"
      ALLOW_NEW_ACCOUNTS: "false"
      WEBRTC: "false"
    placement:
      constraints:
        - node.id == {{docker_worker1_node_id}}
    replicas: 1
    mounts:
      - source: "{{ project_root_directory }}/meshcentral/files"
        target: /home/node/meshcentral/meshcentral-files
        type: bind
      - source: "{{ project_root_directory }}/meshcentral/data"
        target: /home/node/meshcentral/meshcentral-data
        type: bind
      - source: "{{ project_root_directory }}/meshcentral/backup"
        target: /home/node/meshcentral/meshcentral-backup
        type: bind
      - source: "{{ project_root_directory }}/meshcentral/web"
        target: /home/node/meshcentral/meshcentral-web
        type: bind
    labels:
      traefik.http.routers.meshcentral.entrypoints: "websecure"
      traefik.http.routers.meshcentral.rule: "Host(`mesh.{{project_tld}}`)"
      traefik.http.routers.meshcentral.middlewares: "default-headers@file,authelia@file"
      traefik.http.routers.meshcentral.tls: "true"
      traefik.http.routers.meshcentral.service: "meshcentral"
      # traefik.http.routers.meshcentral.tls.certresolver: "{{default_certificate_resolver}}" # Un-Comment this line to use a rule-based cert
      traefik.http.services.meshcentral.loadbalancer.server.port: "{{meshcentral_port}}"
      traefik.enable: "true"
    state: present
  tags: meshcentral
  